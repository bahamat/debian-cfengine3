This is cf3-reference.info, produced by makeinfo version 4.12 from
cf3-Reference.texinfo.

INFO-DIR-SECTION Cfengine Training
START-INFO-DIR-ENTRY
* cfengine Reference:
                        Cfengine is a language based framework
                        designed for configuring and maintaining
                        Unix-like operating systems attached
                        to a TCP/IP network.
END-INFO-DIR-ENTRY


File: cf3-reference.info,  Node: mount in storage,  Next: volume in storage,  Prev: storage in agent promises,  Up: storage in agent promises

7.11.1 `mount' (compound body)
------------------------------

Type: (ext body)

``mount_type''
     Type: (menu option)

     Allowed input range:
                    `nfs'
                    `nfs2'
                    `nfs3'
                    `nfs4'

     Synopsis: Protocol type of remote file system

     Example:

     body mount example
     {
     mount_type => "nfs3";
     }

     Notes:
     This field is mainly for future extensions.

``mount_source''
     Type: string

     Allowed input range: `[cC]:\\.*|/.*'

     Synopsis: Path of remote file system to mount

     Example:

     body mount example
     {
     mount_source "/location/disk/directory";
     }

     Notes:
     This is the location on the remote device, server, SAN etc.

``mount_server''
     Type: string

     Allowed input range: (arbitrary string)

     Synopsis: Hostname or IP or remote file system server

     Example:

     body mount example
     {
     mount_server => "nfs_host.example.org";
     }

     Notes:
     Hostname or IP address, this could be on a SAN.

``mount_options''
     Type: slist

     Allowed input range: `List of option strings to add to the file
     system table ("fstab")'

     Synopsis: (null)

     Example:
     body mount example
     {
     mount_options => { "rw", "acls" };
     }

     Notes:
     This list is concatenated in a form appropriate for the
     filesystem. The options must be legal options for the system mount
     commands.

``edit_fstab''
     Type: (menu option)

     Allowed input range:
                    `true'
                    `false'
                    `yes'
                    `no'
                    `on'
                    `off'

     Synopsis: true/false add or remove entries to the file system
     table ("fstab")

     Example:

     body mount example
     {
     edit_fstab => "true";
     }

     Notes:
     The default behaviour is to not place edits in the file system
     table.

``unmount''
     Type: (menu option)

     Allowed input range:
                    `true'
                    `false'
                    `yes'
                    `no'
                    `on'
                    `off'

     Synopsis: true/false unmount a previously mounted filesystem

     Example:

     body mount example
     {
     unmount => "true";
     }

     Notes:


File: cf3-reference.info,  Node: volume in storage,  Prev: mount in storage,  Up: storage in agent promises

7.11.2 `volume' (compound body)
-------------------------------

Type: (ext body)

``check_foreign''
     Type: (menu option)

     Allowed input range:
                    `true'
                    `false'
                    `yes'
                    `no'
                    `on'
                    `off'

     Synopsis: true/false verify storage that is mounted from a foreign
     system on this host

     Example:

     body volume example

     {
     #..
     check_foreign  => "false";
     }

     Notes:
     Cfengine will not normally perform sanity checks on filesystems
     which are not local to the host. If `true' it will ignore a
     partition's network location and ask the current host to verify
     storage located physically on other systems.

``freespace''
     Type: string

     Allowed input range: `[0-9]+[mb%]'

     Synopsis: Absolute or percentage minimum disk space that should be
     available before warning

     Example:

     body volume example1
     {
     freespace => "10%";
     }

     body volume example2
     {
     freespace => "50M";
     }

     Notes:
     The amount of freespace that is promised on a storage device. Once
     this promise is found not to be kept, warnings are generated.

``sensible_size''
     Type: int

     Allowed input range: `0,99999999999'

     Synopsis: Minimum size in bytes that should be used on a
     sensible-looking storage device

     Example:

     body volume example
     {
     sensible_size => "20K";
     }

     Notes:

     body volume control
     {
     sensible_size => "20K";
     }

``sensible_count''
     Type: int

     Allowed input range: `0,99999999999'

     Synopsis: Minimum number of files that should be defined on a
     sensible-looking storage device

     Example:

     body volume example
     {
     sensible_count => "20";
     }

     Notes:
     Files must be readable by the agent, i.e. it is assumed that the
     agent has privileges on volumes being checked.

``scan_arrivals''
     Type: (menu option)

     Allowed input range:
                    `true'
                    `false'
                    `yes'
                    `no'
                    `on'
                    `off'

     Synopsis: true/false generate pseudo-periodic disk change arrival
     distribution

     Example:

     body volume example
     {
     scan_arrivals => "true";
     }

     Notes:
     This operation should not be left `on' for more than a single run
     (maximum once per week).  It causes cfengine to perform an
     extensive disk scan noting the schedule of changes between files.
     This can be used for a number of analyses including optimum backup
     schedule computation.



File: cf3-reference.info,  Node: Bundles for server,  Next: Bundles for knowledge,  Prev: Bundles for agent,  Up: Top

8 Bundles of `server'
*********************


     bundle server access_rules()

     {
     access:

       "/home/mark/PrivateFiles"

         admit   => { ".*\.example\.org" };

       "/home/mark/.cfagent/bin/cf-agent"

         admit   => { ".*\.example\.org" };

     roles:

       ".*"  authorize => { "mark" };
     }

Bundles in the server describe access promises on specific file and
class objects supplied by the server to clients.

* Menu:

* access in server promises::
* roles in server promises::


File: cf3-reference.info,  Node: access in server promises,  Next: roles in server promises,  Prev: Bundles for server,  Up: Bundles for server

8.1 `access' promises in `server'
=================================

Access promises are conditional promises made by the server about file
objects. The promise has two consequences. For file copy requests, the
file becomes transferrable to the remote client according to the
conditions specified in the server promse (i.e. if the connection
encryption requirements are met, and if the client has been granted
appropriate privileges with `maproot' (like its NFS counterpart) to be
able to see file objects not owned by the server process owner).

   The promise has two mutally exclusive attributes `admit' and `deny'.
Use of `admit' is preferred as mistakes and omissions can easily be
made when excluding from a group.

   When access is granted to a directory, the promise is automatically
given about all of its contents and sub-directories.  The access
promise allows overlapping promises to be made, and these are kept in a
first-come-first-served fashion. Thus file objects (promisers) should
be listed in order of most-specific file first. In this way, specific
promises will override less specific ones.


      access:

         "/PATH/FILE_OBJECT"

           admit   => { "HOSTNAME", "IPV4_ADDRESS", "IPV6_ADDRESS"  };

* Menu:

* Access Example::
* admit in access::
* deny in access::
* maproot in access::
* ifencrypted in access::


File: cf3-reference.info,  Node: Access Example,  Next: admit in access,  Prev: access in server promises,  Up: access in server promises

8.1.1 Access Example
--------------------


#########################################################
# Server config
#########################################################

body server control

{
allowconnects         => { "127.0.0.1" , "::1" };
allowallconnects      => { "127.0.0.1" , "::1" };
trustkeysfrom         => { "127.0.0.1" , "::1" };
}

#########################################################

bundle server access_rules()

{
access:

  "/home/mark/LapTop"

    admit   => { "127.0.0.1" };
}

Entries may be literal addresses of IPv4 or IPv6, or any name registered
in the POSIX `gethostbyname' service.


File: cf3-reference.info,  Node: admit in access,  Next: deny in access,  Prev: Access Example,  Up: access in server promises

8.1.2 `admit'
-------------

Type: slist

Allowed input range: (arbitrary string)

Synopsis: List of host names or IP addresses to grant access to file
objects

Example:
access:

  "/home/mark/LapTop"

    admit   => { "127.0.0.1", "192.168.0.1/24", ".*.domain.tld"  };

Notes:
Admit promises grant access to file objects on the server. Arguments
may be IP addresses or hostnames, provided DNS name resolution is
active. In order to reach this stage, a client must first have passed
all of the standard connection tests in the control body.

   The lists may contain network addresses in CIDR notation or regular
expressions to match the IP address or name of the connecting host.


File: cf3-reference.info,  Node: deny in access,  Next: maproot in access,  Prev: admit in access,  Up: access in server promises

8.1.3 `deny'
------------

Type: slist

Allowed input range: (arbitrary string)

Synopsis: List of host names or IP addresses to deny access to file
objects

Example:

bundle server access_rules()

{
access:

  "/path"

    admit   => { ".*\.example\.org" },
    deny    => { "badhost_1\.example\.org", "badhost_1\.example\.org" };
}

Notes:
Denial is for special exceptions. A better strategy is always to grant
on a need to know basis. A security policy based on exceptions is a
weak one.


File: cf3-reference.info,  Node: maproot in access,  Next: ifencrypted in access,  Prev: deny in access,  Up: access in server promises

8.1.4 `maproot'
---------------

Type: slist

Allowed input range: (arbitrary string)

Synopsis: List of host names or IP addresses to grant full
read-privilege on the server

Example:

access:

 "/home"

       admit => { "backup_host.example.org" },
 ifencrypted => "true",

     # Backup needs to have access to all users

     maproot => { "backup_host.example.org" };

Notes:
Normally users authenticated by the server are granted access only to
files owned by them and no-one else.  Even if the `cf-serverd' process
runs with root privileges on the server side of a client-server
connection, the client is not automatically granted access to download
files owned by non-privileged users. If `maproot' is true then remote
`root' users are granted access to all files.

   A typical case where mapping is important is in making backups of
many user files.


File: cf3-reference.info,  Node: ifencrypted in access,  Prev: maproot in access,  Up: access in server promises

8.1.5 `ifencrypted'
-------------------

Type: (menu option)

Allowed input range:
               `true'
               `false'
               `yes'
               `no'
               `on'
               `off'

Synopsis: true/false whether the current file access promise is
conditional on the connection from the client being encrypted

Example:

access:

   "/path/file"

    admit     => { ".*.example.org" },
    ifencrypted => "true";

Notes:
If this flag is true a client cannot access the file object unless its
connection is encrypted.


File: cf3-reference.info,  Node: roles in server promises,  Prev: access in server promises,  Up: Bundles for server

8.2 `roles' promises in `server'
================================

Roles promises are server-side decisions about which users are allowed
to define soft-classes on the server's system during remote invocation
of `cf-agent'. This implements a form of Role Based Access Control
(RBAC) for pre-assigned class-promise bindings. The user names cited
must be attached to trusted public keys in order to be accepted.


      roles:

        "REGEX"

           authorize => { "USERNAMES", ... };

   It is worth re-iterating here that it is not possible to send
commands or modify promise definitions by remote access. At best users
may try to send classes when using `cf-runagent' in order to activate
sleeping promises. This mechanism limits their ability to do this.


bundle server access_rules()

{
roles:

  # Allow mark

  "Mark_.*"  authorize => { "mark" };
}

In this example user `mark' is granted permission to remotely activate
classes matching the regular expression when using the `cf-runagent' to
activate cfengine. In this way one can implement a form of Role Based
Access Control (RBAC), provided users do not have privileged access on
the host directly.

* Menu:

* authorize in roles::


File: cf3-reference.info,  Node: authorize in roles,  Prev: roles in server promises,  Up: roles in server promises

8.2.1 `authorize'
-----------------

Type: slist

Allowed input range: (arbitrary string)

Synopsis: List of public-key user names that are allowed to activate
the promised class during remote agent activation

Example:

roles:

  ".*"  authorize => { "mark", "marks_friend" };

Notes:
Part of Role Based Access Control (RBAC) in cfengine. The users listed
in this section are granted access to set certain classes by using the
remote `cf-runagent'. The user-names will refer to public key
identities already trusted on the system.


File: cf3-reference.info,  Node: Bundles for knowledge,  Next: Special functions,  Prev: Bundles for server,  Up: Top

9 Bundles of `knowledge'
************************


     bundle knowledge system

     {
     topics:

      Troubleshooting::

       "Segmentation fault"
            association => a("is caused by","Bad memory reference","can cause");

       "Remote connection problem";
       "Web server not running";
       "Print server not running";
       "Bad memory reference";
     }

Knowledge bundles describe topic maps, i.e. Topics, Associations and
Occurrences (of topics in documents). This is for knowledge modelling
and has no functional effect on a system.

* Menu:

* topics in knowledge promises::
* occurrences in knowledge promises::


File: cf3-reference.info,  Node: topics in knowledge promises,  Next: occurrences in knowledge promises,  Prev: Bundles for knowledge,  Up: Bundles for knowledge

9.1 `topics' promises in `knowledge'
====================================

Topic promises are part of the knowledge management engine. A topic is
any string that refers to a concept or subject that we wish to include
in a knowledge base. If a topic has a very long name, it is best to
made the promiser object a short name and use the `comment' field to
add the long explanation (e.g. unique acronym and full text).


      topics:

       "TOPIC STRING"

        comment => "LONG NAME..",
        ...;

   Topics form associative structures based entirely on an abstract
space of natural language. Actually, this is only slightly more abstract
than files, processes and commands etc. The main difference in
knowledge management is that there are no corrective or maintenance
operations associated with knowledge promises.

   Class membership in knowledge management is subtly different from
other parts of cfengine. If a topic lies in a certain class context,
the topic uses it as a type-label. This is used for disambiguation of
subject-area in searches rather than for disambiguation of rules between
physical environments.


bundle knowledge example
{
topics:

   "Distro"
      comment     => "Distribution of linux",
      association => a("is a packaging of","Linux","is packaged as a");
}

Topics are basically identifiers, where the comment field here is a
long form of the subject string. Associations form semantic links
between topics. Topics can appear multiple times in order to form
multiple associations.

* Menu:

* association in topics::
* comment in topics::


File: cf3-reference.info,  Node: association in topics,  Next: comment in topics,  Prev: topics in knowledge promises,  Up: topics in knowledge promises

9.1.1 `association' (compound body)
-----------------------------------

Type: (ext body)

``forward_relationship''
     Type: string

     Allowed input range: (arbitrary string)

     Synopsis: Name of forward association between promiser topic and
     associates

     Example:

     body association example
     {
     forward_relation => "is bigger than";
     }

     Notes:
``backward_relationship''
     Type: string

     Allowed input range: (arbitrary string)

     Synopsis: Name of backward/inverse association from associates to
     promiser topic

     Example:
     body association example
     {
     # ..
     backward_relationship => "is less than";
     }

     Notes:
     Denotes the inverse name which is used to `moralizing' the
     association graph.

``associates''
     Type: slist

     Allowed input range: (arbitrary string)

     Synopsis: List of associated topics by this forward relationship

     Example:

     body association example(literal,scalar,list)

     {
     #...
     associates => { "literal", $(scalar),  @(list)};
     }

     Notes:
     An element of an association which is a list of topics to which the
     current topic is associated.



File: cf3-reference.info,  Node: comment in topics,  Prev: association in topics,  Up: topics in knowledge promises

9.1.2 `comment'
---------------

Type: string

Allowed input range: (arbitrary string)

Synopsis: Retained comment about this promise's real intention

Example:

comment => "This comment follows the data for reference ...",

Notes:
Comments written in code follow the program, they are not merely
discarded.  They appear in reports and error messages.


File: cf3-reference.info,  Node: occurrences in knowledge promises,  Prev: topics in knowledge promises,  Up: Bundles for knowledge

9.2 `occurrences' promises in `knowledge'
=========================================

Occurrences are documents or information resources that discuss topics.
An occurrence promise asserts that a particular document of text
resource in fact represents information about one or more topics.  This
is used to construct references to actual information in a topic map.


      occurrences:

        TOPIC_NAME::

          "URL REFERENCE OR LITERAL STRING"

              represents => { "SUB-TOPIC DISAMBIGUATOR", ... },
              representation => "LITERAL OR URL";


 Mark_Burgess::

     "http://www.iu.hio.no/~mark"
            represents => { "Home Page" };

 lvalue::

     "A variable identifier, i.e. the left hand side of an '=' association. The promiser in a variable promise."
            represents => { "Definitions" },
            representation => "literal";

 Editing_Files::

 "http://www.cfengine.org/confdir/customizepasswd.html"
   represents => { "Setting up users" };

Occurrences are pointers to information about topics. This might be a
literal text string or a URL reference to an external document.

* Menu:

* represents in occurrences::
* representation in occurrences::


File: cf3-reference.info,  Node: represents in occurrences,  Next: representation in occurrences,  Prev: occurrences in knowledge promises,  Up: occurrences in knowledge promises

9.2.1 `represents'
------------------

Type: slist

Allowed input range: (arbitrary string)

Synopsis: List of subtopics that disambiguate the context of this
reference

Example:

occurrences:

  Promise_Theory::

    "A theory of autonomous actors that offer certainty through promises"

      represents     => { "Definitions" },
      representation => "literal";

Notes:
The sub-topic represented by the document reference in a knowledge base.


File: cf3-reference.info,  Node: representation in occurrences,  Prev: represents in occurrences,  Up: occurrences in knowledge promises

9.2.2 `representation'
----------------------

Type: (menu option)

Allowed input range:
               `literal'
               `url'
               `db'
               `file'
               `web'

Synopsis: How to interpret the promiser string e.g. actual data or
reference to data

Example:
occurrences:

  Promise_Theory::

    "A theory of autonomous actors that offer certainty through promises"

      represents     => { "Definitions" },
      representation => "literal";

Notes:
The form of knowledge representation in a topic map occurrence
reference.


File: cf3-reference.info,  Node: Special functions,  Next: Special Variables,  Prev: Bundles for knowledge,  Up: Top

10 Special functions
********************

* Menu:

* Function accessedbefore::
* Function accumulated::
* Function ago::
* Function canonify::
* Function changedbefore::
* Function classify::
* Function classmatch::
* Function execresult::
* Function fileexists::
* Function getindices::
* Function getgid::
* Function getuid::
* Function groupexists::
* Function hash::
* Function hostrange::
* Function hostinnetgroup::
* Function iprange::
* Function irange::
* Function isdir::
* Function isgreaterthan::
* Function islessthan::
* Function islink::
* Function isnewerthan::
* Function isplain::
* Function isvariable::
* Function now::
* Function on::
* Function randomint::
* Function readfile::
* Function readintarray::
* Function readintlist::
* Function readrealarray::
* Function readreallist::
* Function readstringarray::
* Function readstringlist::
* Function readtcp::
* Function regarray::
* Function regcmp::
* Function regline::
* Function reglist::
* Function returnszero::
* Function rrange::
* Function selectservers::
* Function splitstring::
* Function strcmp::
* Function usemodule::
* Function userexists::


File: cf3-reference.info,  Node: Function accessedbefore,  Next: Function accumulated,  Prev: Special functions,  Up: Special functions

10.1 Function accessedbefore
============================

Synopsis: accessedbefore(2 args) returns type class

True if arg1 was accessed before arg2 (atime)

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "do_it" and => { accessedbefore("/tmp/earlier","/tmp/later"), "linux" };

reports:

  do_it::

    "The secret changes have been accessed after the reference time";

}

Notes:
The function accesses the `atime' fields of a file and makes a
comparison.


      touch /tmp/reference
      touch /tmp/secretfile

      /usr/local/sbin/cf-agent -f ./unit_accessed_before.cf -K
      R: The secret changes have been accessed after the reference time


File: cf3-reference.info,  Node: Function accumulated,  Next: Function ago,  Prev: Function accessedbefore,  Up: Special functions

10.2 Function accumulated
=========================

Synopsis: accumulated(6 args) returns type int

Convert an accumulated amount of time into a system representation

Example:

bundle agent testbundle

{
processes:

 ".*"

    process_count   => anyprocs,
    process_select  => proc_finder;

reports:

 any_procs::

   "Found processes in range";
}

########################################################

body process_select proc_finder

{
ttime_range => irange(accumulated(0,0,0,0,2,0),accumulated(0,0,0,0,20,0));
process_result => "ttime";
}

########################################################

body process_count anyprocs

{
match_range => "0,0";
out_of_range_define => { "any_procs" };
}

Notes:
In the example we look for processes that have accumulated between 2
and 20 minutes of total run time.

ARGUMENTS:

`Years'
     The year, e.g. 2009

`Month'
     The Month, 1-12

`Day'
     The day 1-31

`Hours'
     The hour 0-23

`Minutes'
     The minutes 0-59

`Seconds'
     The number of seconds 0-59


File: cf3-reference.info,  Node: Function ago,  Next: Function canonify,  Prev: Function accumulated,  Up: Special functions

10.3 Function ago
=================

Synopsis: ago(6 args) returns type int

Convert a time relative to now to an integer system representation

Example:

bundle agent testbundle

{
processes:

 ".*"

    process_count   => anyprocs,
    process_select  => proc_finder;

reports:

 any_procs::

   "Found processes out of range";
}

########################################################

body process_select proc_finder

{
stime_range => irange(ago(0,0,0,5,30,0),ago(0,0,0,0,20,0));
process_result => "stime";
}

########################################################

body process_count anyprocs

{
match_range => "0,0";
out_of_range_define => { "any_procs" };
}

Notes:
The `ago' function measures time relative to now.

ARGUMENTS:

`Years'
     The year, e.g. 2009

`Months'
     The Month, 1-12

`Days'
     The day 1-31

`Hours'
     The hour 0-23

`Minutes'
     The minutes 0-59

`Seconds'
     The number of seconds 0-59


File: cf3-reference.info,  Node: Function canonify,  Next: Function changedbefore,  Prev: Function ago,  Up: Special functions

10.4 Function canonify
======================

Synopsis: canonify(1 args) returns type string

Convert an abitrary string into a legal class name

Example:

commands:

   "/var/cfengine/bin/$(component)"

       ifvarclass => canonify("start_$(component)");

Notes:
This is for use in turning arbitrary text into class data.


File: cf3-reference.info,  Node: Function changedbefore,  Next: Function classify,  Prev: Function canonify,  Up: Special functions

10.5 Function changedbefore
===========================

Synopsis: changedbefore(2 args) returns type class

True if arg1 was changed before arg2 (ctime)

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "do_it" and => { changedbefore("/tmp/earlier","/tmp/later"), "linux" };

reports:

  do_it::

    "The derived file needs updating";

}

Notes:
Change times include both file permissions and file contents.
Comparisons like this are normally used for updating files (like the
`make' command).


File: cf3-reference.info,  Node: Function classify,  Next: Function classmatch,  Prev: Function changedbefore,  Up: Special functions

10.6 Function classify
======================

Synopsis: classify(1 args) returns type class

True if the canonicalization of the argument is a currently defined
class

Example:

classes:

 "i_am_the_policy_host" expression => classify("master.example.org");

Notes:
This function returns true of the classification (canonical form) of
the argument is already a defined class. This is useful for
transforming variables into classes for instance. See also `canonify()'.


File: cf3-reference.info,  Node: Function classmatch,  Next: Function execresult,  Prev: Function classify,  Up: Special functions

10.7 Function classmatch
========================

Synopsis: classmatch(1 args) returns type class

True if the regular expression matches any currently defined class

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "do_it" and => { classmatch(".*_cfengine_com"), "linux" };

reports:

  do_it::

    "Host matches pattern";

}

Notes:
The regular expression is matched against the current list of defined
classes.


File: cf3-reference.info,  Node: Function execresult,  Next: Function fileexists,  Prev: Function classmatch,  Up: Special functions

10.8 Function execresult
========================

Synopsis: execresult(2 args) returns type string

Execute named command and assign output to variable

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "my_result" string => execresult("/bin/ls /tmp","noshell");

reports:

  linux::

    "Variable is $(my_result)";

}

Notes:
The second argument decides whether a shell will be used to encapsulate
the command.  This is necessary in order to combine commands with pipes
etc, but remember that each command requires a new process that reads
in files beyond cfengine's control. Thus using a shell is both a
performance hog and a potential security issue.

   Note: you should never use this function to execute comands that make
changes to the system. Such an operation is beyind cfengine's ability
to guarantee convergence, and on multiple passes and during syntax
verification, these function calls are executed resulting in system
changes that are `covert'. Calls to `execresult' should be for
discovery and information extraction only.


File: cf3-reference.info,  Node: Function fileexists,  Next: Function getindices,  Prev: Function execresult,  Up: Special functions

10.9 Function fileexists
========================

Synopsis: fileexists(1 args) returns type class

True if the named file can be accessed

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "exists" expression => fileexists("/etc/passwd");

reports:

  exists::

    "File exists";

}

Notes:
The user must have access permissions to the file for this to work
faithfully.


File: cf3-reference.info,  Node: Function getindices,  Next: Function getgid,  Prev: Function fileexists,  Up: Special functions

10.10 Function getindices
=========================

Synopsis: getindices(1 args) returns type slist

Get a list of keys to the array whose id is the argument and assign to
variable

Example:

body common control

{
any::

  bundlesequence  => { "testsetvar" };
}


#######################################################

bundle agent testsetvar

{
vars:

  "v[index_1]" string => "value_1";
  "v[index_2]" string => "value_2";

  "parameter_name" slist => getindices("v");

reports:

  Yr2008::

   "Found index: $(parameter_name)";

}

Notes:
Make sure you specify the correct scope when supplying the name of the
variable.


File: cf3-reference.info,  Node: Function getgid,  Next: Function getuid,  Prev: Function getindices,  Up: Special functions

10.11 Function getgid
=====================

Synopsis: getgid(1 args) returns type int

Return the integer group id of the named group on this host

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "gid" int => getgid("users");

reports:

  Yr2008::

    "Users gid is $(gid)";

}

Notes:
If the named group does not exist, the variable will not be defined.


File: cf3-reference.info,  Node: Function getuid,  Next: Function groupexists,  Prev: Function getgid,  Up: Special functions

10.12 Function getuid
=====================

Synopsis: getuid(1 args) returns type int

Return the integer user id of the named user on this host

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "uid" int => getuid("mark");

reports:

  Yr2008::

    "Users gid is $(uid)";

}

Notes:
If the named user is not registered the variable will not be defined.


File: cf3-reference.info,  Node: Function groupexists,  Next: Function hash,  Prev: Function getuid,  Up: Special functions

10.13 Function groupexists
==========================

Synopsis: groupexists(1 args) returns type class

True if group or numerical id exists on this host

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "gname" expression => groupexists("users");
  "gid"   expression => groupexists("100");

reports:

  gname::

    "Group exists by name";

  gid::

    "Group exists by id";

}

Notes:
The group may be specified by name or number.


File: cf3-reference.info,  Node: Function hash,  Next: Function hostrange,  Prev: Function groupexists,  Up: Special functions

10.14 Function hash
===================

Synopsis: hash(2 args) returns type string

Return the hash of arg1, type arg2 and assign to a variable

Example:


body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "md5" string => hash("Cfengine is not cryptic","md5");

reports:

  Yr2008::

    "Hashed to: $(md5)";

}

Notes:
Hash functions are extremely sensitive to input. You should not expect
to get the same answer from this function as you would from every other
tool, since it depends on how whitespace and end of file characters are
handled.


File: cf3-reference.info,  Node: Function hostrange,  Next: Function hostinnetgroup,  Prev: Function hash,  Up: Special functions

10.15 Function hostrange
========================

Synopsis: hostrange(2 args) returns type class

True if the current host lies in the range of enumerated hostnames
specified

Example:


body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "compute_nodes" expression => hostrange("cpu-","01-32");

reports:

  compute_nodes::

    "No computer is a cluster";

}

Notes:
This is a pattern matching function for non-regular (enumerated)
expressions.


File: cf3-reference.info,  Node: Function hostinnetgroup,  Next: Function iprange,  Prev: Function hostrange,  Up: Special functions

10.16 Function hostinnetgroup
=============================

Synopsis: hostinnetgroup(1 args) returns type class

True if the current host is in the named netgroup

Example:

Fill me in (/home/mark/LapTop/CfengineProjects/CompanyDocuments/trunk/Cfengine3Reference/function_hostinnetgroup_example.texinfo)
""

Notes:

Fill me in (/home/mark/LapTop/CfengineProjects/CompanyDocuments/trunk/Cfengine3Reference/function_hostinnetgroup_notes.texinfo)
""


File: cf3-reference.info,  Node: Function iprange,  Next: Function irange,  Prev: Function hostinnetgroup,  Up: Special functions

10.17 Function iprange
======================

Synopsis: iprange(1 args) returns type class

True if the current host lies in the range of IP addresses specified

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "adhoc_group_1" expression => iprange("128.39.89.10-15");
  "adhoc_group_2" expression => iprange("128.39.74.1/23");

reports:

  adhoc_group_1::

    "Some numerology";

  adhoc_group_2::

    "The masked warriors";
}

Notes:
Pattern matching based on IP addresses.


File: cf3-reference.info,  Node: Function irange,  Next: Function isdir,  Prev: Function iprange,  Up: Special functions

10.18 Function irange
=====================

Synopsis: irange(2 args) returns type irange [int,int]

Define a range of integer values for cfengine internal use

Example:


 Notes:
Not currently used.


File: cf3-reference.info,  Node: Function isdir,  Next: Function isgreaterthan,  Prev: Function irange,  Up: Special functions

10.19 Function isdir
====================

Synopsis: isdir(1 args) returns type class

True if the named object is a directory

Example:


body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "isdir" expression => isdir("/etc");

reports:

  isdir::

    "Directory exists..";

}

Notes:
The cfengine process must have access to the object concerned in order
for this to work.


File: cf3-reference.info,  Node: Function isgreaterthan,  Next: Function islessthan,  Prev: Function isdir,  Up: Special functions

10.20 Function isgreaterthan
============================

Synopsis: isgreaterthan(2 args) returns type class

True if arg1 is numerically greater than arg2, else compare strings
like strcmp

Example:

body common control

{
bundlesequence  => { "test"  };
}

###########################################################

bundle agent test

{
classes:

  "ok" expression => isgreaterthan("1","0");

reports:

  ok::

    "Assertion is true";

 !ok::

  "Assertion is false";

}

Notes:
The comparison is made numerically if possible. If the values are
strings, the result is identical to that of comparing with `strcmp()'.


File: cf3-reference.info,  Node: Function islessthan,  Next: Function islink,  Prev: Function isgreaterthan,  Up: Special functions

10.21 Function islessthan
=========================

Synopsis: islessthan(2 args) returns type class

True if arg1 is numerically less than arg2, else compare strings like
NOT strcmp

Example:

body common control

{
bundlesequence  => { "test"  };
}

###########################################################

bundle agent test

{
classes:

  "ok" expression => islessthan("0","1");

reports:

  ok::

    "Assertion is true";

 !ok::

  "Assertion is false";

}

Notes:
The complement of `isgreaterthan'.  The comparison is made numerically
if possible. If the values are strings, the result is identical to that
of comparing with `strcmp()'.


File: cf3-reference.info,  Node: Function islink,  Next: Function isnewerthan,  Prev: Function islessthan,  Up: Special functions

10.22 Function islink
=====================

Synopsis: islink(1 args) returns type class

True if the named object is a symbolic link

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "isdir" expression => islink("/tmp/link");

reports:

  isdir::

    "Directory exists..";

}

Notes:
The link node must both exist and be a symbolic link. Hard links cannot
be detected using this function. A hard link is a regular file or
directory.


File: cf3-reference.info,  Node: Function isnewerthan,  Next: Function isplain,  Prev: Function islink,  Up: Special functions

10.23 Function isnewerthan
==========================

Synopsis: isnewerthan(2 args) returns type class

True if arg1 is newer (modified later) than arg2 (mtime)

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "do_it" and => { isnewerthan("/tmp/later","/tmp/earlier"), "linux" };

reports:

  do_it::

    "The derived file needs updating";

}

Notes:
This function compares the modification time of the file, referring to
changes of content only.


File: cf3-reference.info,  Node: Function isplain,  Next: Function isvariable,  Prev: Function isnewerthan,  Up: Special functions

10.24 Function isplain
======================

Synopsis: isplain(1 args) returns type class

True if the named object is a plain/regular file

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "isplain" expression => isplain("/etc/passwd");

reports:

  isplain::

    "File exists..";

}

Notes:

File: cf3-reference.info,  Node: Function isvariable,  Next: Function now,  Prev: Function isplain,  Up: Special functions

10.25 Function isvariable
=========================

Synopsis: isvariable(1 args) returns type class

True if the named variable is defined

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "bla" string => "xyz..";

classes:

  "exists" expression => isvariable("bla");

reports:

  exists::

    "Variable exists: \"$(bla)\"..";

}

Notes:
The variable need only exist. This says nothing about its value. Use
`regcmp' to check variable values.


File: cf3-reference.info,  Node: Function now,  Next: Function on,  Prev: Function isvariable,  Up: Special functions

10.26 Function now
==================

Synopsis: now(0 args) returns type int

Convert the current time into system representation

Example:

body file_select zero_age
{
mtime       => irange(ago(1,0,0,0,0,0),now);
file_result => "mtime";
}

Notes:

File: cf3-reference.info,  Node: Function on,  Next: Function randomint,  Prev: Function now,  Up: Special functions

10.27 Function on
=================

Synopsis: on(6 args) returns type int

Convert an exact date/time to an integer system representation

Example:

body file_select zero_age
{
mtime       => irange(on(2000,1,1,0,0,0),now);
file_result => "mtime";
}

Notes:
An absolute date.  Note that in process matching dates could be wrong
by an hour depending on Daylight Savings Time / Summer Time. This is a
known bug to be fixed.

ARGUMENTS:

`Years'
     The year, e.g. 2009

`Month'
     The Month, 1-12

`Day'
     The day 1-31

`Hours'
     The hour 0-23

`Minutes'
     The minutes 0-59

`Seconds'
     The number of seconds 0-59


File: cf3-reference.info,  Node: Function randomint,  Next: Function readfile,  Prev: Function on,  Up: Special functions

10.28 Function randomint
========================

Synopsis: randomint(2 args) returns type int

Generate a random integer between the given limits

Example:

vars:

 "ran"    int => randomint(4,88);

Notes:
The limits must be integer values and the resulting numbers are based
on the entropy of the md5 algorithm.


File: cf3-reference.info,  Node: Function readfile,  Next: Function readintarray,  Prev: Function randomint,  Up: Special functions

10.29 Function readfile
=======================

Synopsis: readfile(2 args) returns type string

Read max number of bytes from named file and assign to variable

Example:

vars:

 "xxx"

    string => readfile( "/home/mark/tmp/testfile" , "33" );

Notes:
The file (fragment) is read into a single scalar variable.


File: cf3-reference.info,  Node: Function readintarray,  Next: Function readintlist,  Prev: Function readfile,  Up: Special functions

10.30 Function readintarray
===========================

Synopsis: readintarray(6 args) returns type int

Read an array of integers from a file and assign the dimension to a
variable

Example:
vars:

  "dim_array"

     int =>  readintarray("array_name","/tmp/array","#[^\n]*",":",10,4000);

Notes:
Reads a two dimensional array from a file. One dimension is separated by
the character specified in the argument, the other by the the lines in
the file.  The first field of the lines names the first array argument.


     1: 5:7:21:13
     2:19:8:14:14
     3:45:1:78:22
     4:64:2:98:99

Results in

     array_name[1][0]   1
     array_name[1][1]   5
     array_name[1][2]   7
     array_name[1][3]   21
     array_name[1][4]   13
     array_name[2][0]   2
     array_name[2][1]   19
     array_name[2][2]   8
     array_name[2][3]   14
     array_name[2][4]   14
     array_name[3][0]   3
     array_name[3][1]   45
     array_name[3][2]   1
     array_name[3][3]   78
     array_name[3][4]   22
     array_name[4][0]   4
     array_name[4][1]   64
     array_name[4][2]   2
     array_name[4][3]   98
     array_name[4][4]   99


File: cf3-reference.info,  Node: Function readintlist,  Next: Function readrealarray,  Prev: Function readintarray,  Up: Special functions

10.31 Function readintlist
==========================

Synopsis: readintlist(5 args) returns type ilist

Read and assign a list variable from a file of separated ints

Example:


body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "mylist" ilist => { readintlist("/tmp/listofint","#.*","[\n]",10,400) };

reports:

  Yr2008::

    "List entry: $(mylist)";

}

ARGUMENTS:

`filename'
     The name of a text file containing text to be split up as a list.

`comment'
     A regex pattern which is to be ignored in the file

`split'
     A regex pattern which is to be used to split up the file into items

`maxent'
     The maximum number of list items to read from the file

`maxsize'
     The maximum number of bytes to read from the file

Notes:

File: cf3-reference.info,  Node: Function readrealarray,  Next: Function readreallist,  Prev: Function readintlist,  Up: Special functions

10.32 Function readrealarray
============================

Synopsis: readrealarray(6 args) returns type int

Read an array of real numbers from a file and assign the dimension to a
variable

Example:
vars:

  "dim_array"

     int =>  readrealarray("array_name","/tmp/array","#[^\n]*",":",10,4000);

Notes:
See the notes for `readintarray'.


File: cf3-reference.info,  Node: Function readreallist,  Next: Function readstringarray,  Prev: Function readrealarray,  Up: Special functions

10.33 Function readreallist
===========================

Synopsis: readreallist(5 args) returns type rlist

Read and assign a list variable from a file of separated real numbers

Example:


body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "mylist" ilist => { readreallist("/tmp/listofreal","#.*","[\n]",10,400) };

reports:

  Yr2008::

    "List entry: $(mylist)";

}

ARGUMENTS:

`filename'
     The name of a text file containing text to be split up as a list.

`comment'
     A regex pattern which is to be ignored in the file

`split'
     A regex pattern which is to be used to split up the file into items

`maxent'
     The maximum number of list items to read from the file

`maxsize'
     The maximum number of bytes to read from the file

Notes:

File: cf3-reference.info,  Node: Function readstringarray,  Next: Function readstringlist,  Prev: Function readreallist,  Up: Special functions

10.34 Function readstringarray
==============================

Synopsis: readstringarray(6 args) returns type int

Read an array of strings from a file and assign the dimension to a
variable

Example:
vars:

  "dim_array"

     int =>  readstringarray("array_name","/tmp/array","#[^\n]*",":",10,4000);

Returns an integer number of keys in the array.

ARGUMENTS:

`array_name'
     The name to be used for the container array.

`filename'
     The name of a text file containing text to be split up as a list.

`comment'
     A regex pattern which is to be ignored in the file

`split'
     A regex pattern which is to be used to split up the file into items

`maxent'
     The maximum number of list items to read from the file

`maxsize'
     The maximum number of bytes to read from the file

Notes:
Reads a two dimensional array from a file. One dimension is separated by
the character specified in the argument, the other by the the lines in
the file.  The first field of the lines names the first array argument.


     at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash
     avahi:x:103:105:User for Avahi:/var/run/avahi-daemon:/bin/false
     beagleindex:x:104:106:User for Beagle indexing:/var/cache/beagle:/bin/bash
     bin:x:1:1:bin:/bin:/bin/bash
     daemon:x:2:2:Daemon:/sbin:/bin/bash

Results in a systematically indexed map of the file. Some samples are
show below to illustrate the pattern.

     ...
     array_name[daemon][0]   daemon
     array_name[daemon][1]   x
     array_name[daemon][2]   2
     array_name[daemon][3]   2
     array_name[daemon][4]   Daemon
     array_name[daemon][5]   /sbin
     array_name[daemon][6]   /bin/bash
     ...
     array_name[at][3]       25
     array_name[at][4]       Batch jobs daemon
     array_name[at][5]       /var/spool/atjobs
     array_name[at][6]       /bin/bash
     ...
     array_name[games][3]    100
     array_name[games][4]    Games account
     array_name[games][5]    /var/games
     array_name[games][6]    /bin/bash
     ...


File: cf3-reference.info,  Node: Function readstringlist,  Next: Function readtcp,  Prev: Function readstringarray,  Up: Special functions

10.35 Function readstringlist
=============================

Synopsis: readstringlist(5 args) returns type slist

Read and assign a list variable from a file of separated strings

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "mylist" ilist => { readstringlist("/tmp/listofint","#.*","[\n]",10,400) };

reports:

  Yr2008::

    "List entry: $(mylist)";

}

ARGUMENTS:

`filename'
     The name of a text file containing text to be split up as a list.

`comment'
     A regex pattern which is to be ignored in the file

`split'
     A regex pattern which is to be used to split up the file into items

`maxent'
     The maximum number of list items to read from the file

`maxsize'
     The maximum number of bytes to read from the file

Notes:
The following example file would be split into a list of the first ten
Green letters.


     alpha
     beta
     gamma # This is a comment
     delta
     epsilon
     zeta
     eta
     theta
     iota
     kappa
     lambda
     mu
     nu
     etc


File: cf3-reference.info,  Node: Function readtcp,  Next: Function regarray,  Prev: Function readstringlist,  Up: Special functions

10.36 Function readtcp
======================

Synopsis: readtcp(4 args) returns type string

Connect to tcp port, send string and assign result to variable

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
vars:

  "my80" string => readtcp("www.cfengine.com","80","GET /index.html",400);

reports:

  Yr2008::

    "Server returned: $(my80)";

}

`hostnameip'
     The host name or IP address of a tcp socket.

`port'
     The port number to connect to.

`sendstring'
     A string to send to the TCP port to illicit a response

`maxbytes'
     The maximum number of bytes to read in response.

Notes:
If the send string is empty, no data are sent or received from the
socket. Then the function only tests whether the TCP port is alive and
returns an empty variable.

   Note that on some systems the timeout mechanism does not seem to
successfully interrupt the waiting system calls so this might hang if
you send a query string that is incorrect.  This should not happen, but
the cause has yet to be diagnosed.


File: cf3-reference.info,  Node: Function regarray,  Next: Function regcmp,  Prev: Function readtcp,  Up: Special functions

10.37 Function regarray
=======================

Synopsis: regarray(2 args) returns type class

True if arg1 matches any item in the associative array with id=arg2

Example:

body common control

{
bundlesequence  => { "testbundle"  };
}

###########################################

bundle agent testbundle
{
vars:

  "myarray[0]" string => "bla1";
  "myarray[1]" string => "bla2";
  "myarray[3]" string => "bla";
  "myarray"    string => "345";
  "not"        string => "345";

classes:

  "ok" expression => regarray("myarray","b.*2");

reports:

 ok::

    "Found in list";

 !ok::

    "Not found in list";

}

Notes:
Tests whether an associative array contains elements matching a certain
regular expression.  The result is a class.

ARGUMENTS:

`array_name'
     The name of the array, with no `$()' surrounding, etc.

`regex'
     A regular expression to match the content.


File: cf3-reference.info,  Node: Function regcmp,  Next: Function regline,  Prev: Function regarray,  Up: Special functions

10.38 Function regcmp
=====================

Synopsis: regcmp(2 args) returns type class

True if arg1 is a regular expression matching arg2

Example:

bundle agent subtest(user)

{
classes:

  "invalid" not => regcmp("[a-z][a-z][a-z][a-z]","$(user)");

reports:

 !invalid::

  "User name $(user) is valid at 4 letters";

 invalid::

  "User name $(user) is invalid";
}

Notes:
Compares a string to a regular expression.

ARGUMENTS:

`regex'
     A regular expression to match the test data.

`string'
     Test data for the regular expression.


File: cf3-reference.info,  Node: Function regline,  Next: Function reglist,  Prev: Function regcmp,  Up: Special functions

10.39 Function regline
======================

Synopsis: regline(2 args) returns type class

True if arg1 is a regular expression matching a line in file arg2

Example:

bundle agent testbundle

{
files:

  "/tmp/testfile" edit_line => test;
}

########################################################

bundle edit_line test
{
classes:

    "ok" expression => regline(".*XYZ.*","$(edit.filename)");

reports:

 ok::

   "File $(edit.filename) has a line with \"XYZ\" in it";

}

Notes:
Note that the regular expression must match an entire line of the file
in order to give a true result. This function is useful for editfiles
applications, where one might want to set a class for detecting the
presence of a string which does not exactly match one being inserted.
e.g.


bundle edit_line upgrade_cfexecd
  {
  classes:

    # Check there is not already a crontab line, not identical to
    # the one proposed below...

    "exec_fix" not => regline(".*cf-execd.*","$(edit.filename)");

  insert_lines:

    exec_fix::

     "0,5,10,15,20,25,30,35,40,45,50,55 * * * * /var/cfengine/bin/cf-execd -F";

  reports:

    exec_fix::

     "Added a 5 minute schedule to crontabs";
  }


File: cf3-reference.info,  Node: Function reglist,  Next: Function returnszero,  Prev: Function regline,  Up: Special functions

10.40 Function reglist
======================

Synopsis: reglist(2 args) returns type class

True if arg1 matches any item in the list with id=arg2

Example:

vars:

 "nameservers" slist => {
                        "128.39.89.10",
                        "128.39.74.16",
                        "192.168.1.103"
                        };
classes:

  "am_name_server" expression => reglist("@(nameservers)","$(sys.ipv4[eth0])");

Notes:
Matches a list of test strings to a regular expression.

ARGUMENTS:

`list'
     The list of strings.

`regex'
     The scalar regular expression string.


File: cf3-reference.info,  Node: Function returnszero,  Next: Function rrange,  Prev: Function reglist,  Up: Special functions

10.41 Function returnszero
==========================

Synopsis: returnszero(2 args) returns type class

True if named shell command has exit status zero

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "my_result" expression => returnszero("/usr/local/bin/mycommand","noshell");

reports:

  !my_result::

    "Command failed";

}

Notes:
This is the complement of `execresult', but it returns a class result
rather than the output of the command.


File: cf3-reference.info,  Node: Function rrange,  Next: Function selectservers,  Prev: Function returnszero,  Up: Special functions

10.42 Function rrange
=====================

Synopsis: rrange(2 args) returns type rrange [real,real]

Define a range of real numbers for cfengine internal use

Example:

?

Notes:
This is not yet used.


File: cf3-reference.info,  Node: Function selectservers,  Next: Function splitstring,  Prev: Function rrange,  Up: Special functions

10.43 Function selectservers
============================

Synopsis: selectservers(6 args) returns type int

Select tcp servers which respond correctly to a query and return their
number, set array of names

Example:

body common control

{
bundlesequence  => { "test"  };
}

###########################################################

bundle agent test

{
vars:

 "hosts" slist => { "slogans.iu.hio.no", "eternity.iu.hio.no", "nexus.iu.hio.no" };

 "up_servers" int =>  selectservers("@(hosts)","80","","","100","alive_servers");

classes:

  "someone_alive" expression => isgreaterthan("$(up_servers)","0");

  "i_am_a_server" expression => regarray("up_servers","$(host)|$(fqhost)");

reports:

  someone_alive::

    "Number of active servers $(up_servers)";
    "First server $(alive_servers[0]) fails over to $(alive_servers[1])";

}

Notes:
This function selects all the TCP ports that are active and functioning
from an ordered list and builds an array of their names.  This allows
us to select a current list of failover alternatives that are pretested.

`hostlist'
     A list of host names or IP addresses to attempt to connect to.

`port'
     The port number for the service.

`sendstr'
     An optional string to send to the server to illicit a response.

`regex_on_reply'
     If a string is sent, this regex must match the resulting reply.

`maxbytesread_reply'
     The maximum number of bytes to read as the server's reply.

`array_name'
     The name of the array to build containing the names of hosts that
     pass the above tests. The array is ordered `array_name[0],..' etc.


File: cf3-reference.info,  Node: Function splitstring,  Next: Function strcmp,  Prev: Function selectservers,  Up: Special functions

10.44 Function splitstring
==========================

Synopsis: splitstring(3 args) returns type slist

Convert a string in arg1 into a list of max arg3 strings by splitting
on a regular expression in arg2

Example:

bundle agent test

{
vars:

  "split1" slist => splitstring("one:two:three",":","10");
  "split2" slist => splitstring("alpha:xyz:beta","xyz","10");

reports:

 linux::

  "Found key $(split1)";
  "Found key $(split2)";

}

Returns a list of strings from a string.

ARGUMENTS:

`string'
     The string to be split.

`regex'
     A regular expression that is to be the delimiter.

`maxent'
     The maximum number of list items to be created.

Notes:
If the maximum number is insufficient to accomodate all entries, the
final entry will contain the rest of the string.


File: cf3-reference.info,  Node: Function strcmp,  Next: Function usemodule,  Prev: Function splitstring,  Up: Special functions

10.45 Function strcmp
=====================

Synopsis: strcmp(2 args) returns type class

True if the two strings match exactly

Example:

body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "same" expression => strcmp("test","test");

reports:

  same::

    "Strings are equal";

 !same::

    "Strings are not equal";
}

Notes:

File: cf3-reference.info,  Node: Function usemodule,  Next: Function userexists,  Prev: Function strcmp,  Up: Special functions

10.46 Function usemodule
========================

Synopsis: usemodule(2 args) returns type class

Execute cfengine module script and set class if successful

Example:

body common control
   {
   any::

      bundlesequence  => {
                         test
                         };
   }

###################################################################

bundle agent test

{
classes:

  # returns $(user)

  "done" expression => usemodule("getusers","");

commands:

  "/bin/echo promiser text" args => "test $(user)";
}

Notes:
Modules must reside in `WORKDIR/modules' but no longer require a
special naming convention.

ARGUMENTS:

`Module name'
     The name of the module without its leading path, since it is
     assuemed to be in the registered modules directory.

`Argument string'
     Any command link arguments to pass to the module.



File: cf3-reference.info,  Node: Function userexists,  Prev: Function usemodule,  Up: Special functions

10.47 Function userexists
=========================

Synopsis: userexists(1 args) returns type class

True if user name or numerical id exists on this host

Example:


body common control

{
bundlesequence  => { "example" };
}

###########################################################

bundle agent example

{
classes:

  "ok" expression => userexists("root");

reports:

  ok::

    "Root exists";

 !ok::

    "Root does not exist";
}

Notes:
Checks whether the user is in the password database for the current
host.  The argument must be a user name or user id.


File: cf3-reference.info,  Node: Special Variables,  Next: Logs and records,  Prev: Special functions,  Up: Top

11 Special Variables
********************

* Menu:

* Variable context const::
* Variable context sys::


File: cf3-reference.info,  Node: Variable context const,  Next: Variable context sys,  Prev: Special Variables,  Up: Special Variables

11.1 Variable context `const'
=============================

Cfengine defines a number of variables for embedding unprintable values
or values with special meanings in strings.

* Menu:

* Variable const.dollar::
* Variable const.endl::
* Variable const.n::
* Variable const.r::


File: cf3-reference.info,  Node: Variable const.dollar,  Next: Variable const.endl,  Prev: Variable context const,  Up: Variable context const

11.1.1 Variable const.dollar
----------------------------


reports:

  some::

   "The value of $(const.dollar)(const.dollar) is $(const.dollar)";

   "But the value of \$(dollar) is \$(dollar)";


File: cf3-reference.info,  Node: Variable const.endl,  Next: Variable const.n,  Prev: Variable const.dollar,  Up: Variable context const

11.1.2 Variable const.endl
--------------------------


reports:

  "A newline with either $(const.endl) or with $(const.n) is ok";


File: cf3-reference.info,  Node: Variable const.n,  Next: Variable const.r,  Prev: Variable const.endl,  Up: Variable context const

11.1.3 Variable const.n
-----------------------


reports:

  "A newline with either $(const.n) or with $(const.endl) is ok";


File: cf3-reference.info,  Node: Variable const.r,  Prev: Variable const.n,  Up: Variable context const

11.1.4 Variable const.r
-----------------------


reports:

  "A carriage return character is $(const.r)";


File: cf3-reference.info,  Node: Variable context sys,  Prev: Variable context const,  Up: Special Variables

11.2 Variable context `sys'
===========================

System variables are derived from cfengine's automated discovery of
system values.  They are provided as variables in order to make
automatically adaptive rules for configuration, e.g.


files:

 any::

  "$(sys.resolv)"

      create        => "true",
      edit_line     => doresolv("@(this.list1)","@(this.list2)"),
      edit_defaults => reconstruct;

The above rule requires no class specification because the variable
itself is class-specific.

* Menu:

* Variable sys.arch::
* Variable sys.cdate::
* Variable sys.class::
* Variable sys.date::
* Variable sys.domain::
* Variable sys.fqhost::
* Variable sys.fstab::
* Variable sys.host::
* Variable sys.interface::
* Variable sys.ipv4::
* Variable sys.ipv4[wlan0]::
* Variable sys.ipv4_1[wlan0]::
* Variable sys.ipv4_2[wlan0]::
* Variable sys.ipv4_3[wlan0]::
* Variable sys.long_arch::
* Variable sys.maildir::
* Variable sys.os::
* Variable sys.ostype::
* Variable sys.release::
* Variable sys.resolv::
* Variable sys.uqhost::
* Variable sys.workdir::


File: cf3-reference.info,  Node: Variable sys.arch,  Next: Variable sys.cdate,  Prev: Variable context sys,  Up: Variable context sys

11.2.1 Variable sys.arch
------------------------

The variable gives the kernel's short architecture description.


# arch = x86_64


File: cf3-reference.info,  Node: Variable sys.cdate,  Next: Variable sys.class,  Prev: Variable sys.arch,  Up: Variable context sys

11.2.2 Variable sys.cdate
-------------------------

The date of the system in canonical form, i.e. in the form of a class.


# cdate = Sun_Dec__7_10_39_53_2008_


File: cf3-reference.info,  Node: Variable sys.class,  Next: Variable sys.date,  Prev: Variable sys.cdate,  Up: Variable context sys

11.2.3 Variable sys.class
-------------------------

This variable contains the name of the hard-class category for this
host, i.e. its top level operating system type classification.


# class = linux


File: cf3-reference.info,  Node: Variable sys.date,  Next: Variable sys.domain,  Prev: Variable sys.class,  Up: Variable context sys

11.2.4 Variable sys.date
------------------------

The date of the system as a text string.


# date = Sun Dec  7 10:39:53 2008


File: cf3-reference.info,  Node: Variable sys.domain,  Next: Variable sys.fqhost,  Prev: Variable sys.date,  Up: Variable context sys

11.2.5 Variable sys.domain
--------------------------

The domain name as divined by cfengine. If the DNS is in use, it could
be possible to derive the domain name from its DNS regisration, but in
general there is no way to discover this value automatically. The
`common control' body permits the ultimate specification of this value.


# domain = example.org


File: cf3-reference.info,  Node: Variable sys.fqhost,  Next: Variable sys.fstab,  Prev: Variable sys.domain,  Up: Variable context sys

11.2.6 Variable sys.fqhost
--------------------------

The fully qualified name of the host. In order to compute this value
properly, the domain name must be defined.


# fqhost = host.example.org


File: cf3-reference.info,  Node: Variable sys.fstab,  Next: Variable sys.host,  Prev: Variable sys.fqhost,  Up: Variable context sys

11.2.7 Variable sys.fstab
-------------------------

The location of the system filesystem (mount) table.


# fstab = /etc/fstab


File: cf3-reference.info,  Node: Variable sys.host,  Next: Variable sys.interface,  Prev: Variable sys.fstab,  Up: Variable context sys

11.2.8 Variable sys.host
------------------------

The name of the current host, according to the kernel. It is undefined
whether this is qualified or unqualified with a domain name.


# host = myhost


File: cf3-reference.info,  Node: Variable sys.interface,  Next: Variable sys.ipv4,  Prev: Variable sys.host,  Up: Variable context sys

11.2.9 Variable sys.interface
-----------------------------

The assumed (default) name of the main system interface on this host.


# interface = eth0


File: cf3-reference.info,  Node: Variable sys.ipv4,  Next: Variable sys.ipv4[wlan0],  Prev: Variable sys.interface,  Up: Variable context sys

11.2.10 Variable sys.ipv4
-------------------------

All four octets of the IPv4 address of the system interface named as
the associative array index, e.g. `$(ipv4_1[$(interface)])'.


# The IP on the default interface
#        ipv4 = 192.168.1.101

# The octets of all interfaces as an associative array
# ipv4_1[le0] = 192
# ipv4_2[le0] = 192.168
# ipv4_3[le0] = 192.168.1
#   ipv4[le0] = 192.168.1.101


File: cf3-reference.info,  Node: Variable sys.ipv4[wlan0],  Next: Variable sys.ipv4_1[wlan0],  Prev: Variable sys.ipv4,  Up: Variable context sys

11.2.11 Variable sys.ipv4[wlan0]
--------------------------------


Fill me in (/home/mark/LapTop/CfengineProjects/CompanyDocuments/trunk/Cfengine3Reference/var_sys_ipv4[wlan0].texinfo)
""


File: cf3-reference.info,  Node: Variable sys.ipv4_1[wlan0],  Next: Variable sys.ipv4_2[wlan0],  Prev: Variable sys.ipv4[wlan0],  Up: Variable context sys

11.2.12 Variable sys.ipv4_1[wlan0]
----------------------------------


Fill me in (/home/mark/LapTop/CfengineProjects/CompanyDocuments/trunk/Cfengine3Reference/var_sys_ipv4_1[wlan0].texinfo)
""


File: cf3-reference.info,  Node: Variable sys.ipv4_2[wlan0],  Next: Variable sys.ipv4_3[wlan0],  Prev: Variable sys.ipv4_1[wlan0],  Up: Variable context sys

11.2.13 Variable sys.ipv4_2[wlan0]
----------------------------------


Fill me in (/home/mark/LapTop/CfengineProjects/CompanyDocuments/trunk/Cfengine3Reference/var_sys_ipv4_2[wlan0].texinfo)
""


File: cf3-reference.info,  Node: Variable sys.ipv4_3[wlan0],  Next: Variable sys.long_arch,  Prev: Variable sys.ipv4_2[wlan0],  Up: Variable context sys

11.2.14 Variable sys.ipv4_3[wlan0]
----------------------------------


Fill me in (/home/mark/LapTop/CfengineProjects/CompanyDocuments/trunk/Cfengine3Reference/var_sys_ipv4_3[wlan0].texinfo)
""


File: cf3-reference.info,  Node: Variable sys.long_arch,  Next: Variable sys.maildir,  Prev: Variable sys.ipv4_3[wlan0],  Up: Variable context sys

11.2.15 Variable sys.long_arch
------------------------------

The long architecture name for this system kernel. This name is
sometimes quite unwieldy but can be useful for logging purposes.


# long_arch = linux_x86_64_2_6_22_19_0_1_default__1_SMP_2008_10_14_22_17_43__0200


File: cf3-reference.info,  Node: Variable sys.maildir,  Next: Variable sys.os,  Prev: Variable sys.long_arch,  Up: Variable context sys

11.2.16 Variable sys.maildir
----------------------------

The name of the system email spool directory.


# maildir = /var/spool/mail


File: cf3-reference.info,  Node: Variable sys.os,  Next: Variable sys.ostype,  Prev: Variable sys.maildir,  Up: Variable context sys

11.2.17 Variable sys.os
-----------------------

The name of the operating system according to the kernel.


# os = linux


File: cf3-reference.info,  Node: Variable sys.ostype,  Next: Variable sys.release,  Prev: Variable sys.os,  Up: Variable context sys

11.2.18 Variable sys.ostype
---------------------------

Another name for the operating system.


# ostype = linux_x86_64


File: cf3-reference.info,  Node: Variable sys.release,  Next: Variable sys.resolv,  Prev: Variable sys.ostype,  Up: Variable context sys

11.2.19 Variable sys.release
----------------------------

The kernel release of the operating system.


# release = 2.6.22.19-0.1-default


File: cf3-reference.info,  Node: Variable sys.resolv,  Next: Variable sys.uqhost,  Prev: Variable sys.release,  Up: Variable context sys

11.2.20 Variable sys.resolv
---------------------------

The location of the system resolver file.


# resolv = /etc/resolv.conf


File: cf3-reference.info,  Node: Variable sys.uqhost,  Next: Variable sys.workdir,  Prev: Variable sys.resolv,  Up: Variable context sys

11.2.21 Variable sys.uqhost
---------------------------

The unqualified name of the current host. See also `sys.fqhost'.


# uqhost = myhost


File: cf3-reference.info,  Node: Variable sys.workdir,  Prev: Variable sys.uqhost,  Up: Variable context sys

11.2.22 Variable sys.workdir
----------------------------

The location of the cfengine work directory and cache. For the system
privileged user this is normally:


# workdir = /var/cfengine

   For non-privileged users it is in the user's home directory:


# workdir = /home/user/.cfagent


File: cf3-reference.info,  Node: Logs and records,  Prev: Special Variables,  Up: Top

12 Logs and records
*******************

Cfengine writes numerous logs and records to its private workspace,
referred to as `WORKDIR'. This chapter makes some brief notes about
these files. Cfengine approaches monitoring and reporting from the
viewpoint of scalability so there is no default centralizatio of
reporting information, as this is untenable for more than a few hundred
hosts. Instead, in the classic cfengine way, every host is reponsible
for its own data. Solutions for centralization and netwide reporting
will be given elsewhere.

   The filenames referred to in this section are all relative to the
cfengine work directory `WORKDIR'.

* Menu:

* Embedded Databases::
* Text logs::
* Reports in outputs::
* State information::


File: cf3-reference.info,  Node: Embedded Databases,  Next: Text logs,  Prev: Logs and records,  Up: Logs and records

12.1 Embedded Databases
=======================

The embedded databases can be viewed and printed using the reporting
tool `cf-report'.

`cf_Audit.db'
     A compressed database of auditing information. This file grows
     very large is auditing is switched on. By default, only minor
     information about cfengine runs are recorded. This file should be
     archived and deleted regularly to avoid choking the system.

`cf_LastSeen.db'
     A database of hosts that last contacted this host, or were
     contacted by this host which includes the times at which they were
     last observed.

`cf_classes.db'
     A database of classes that have been defined on the current host,
     including their relative frequences, scaled like a probability.

`checksum_digests.db'
     The database of hash values used in cfengine's change management
     functions.

`performance.db'
     A database of last, average and deviation times of jobs recorded
     by `cf-agent'.  Most promises take an immeasurablely short time to
     check, but longer tasks such as command execution and file copying
     are measured by default.  Other checks can be instrumented by
     setting a `measurement_class' in the `action' body of a promise.

`cfengine_lock_db'
     A database of active and inactive locks and their expiry times.
     Deleting this database will reset all lock protections in cfengine.

`state/cf_observations.db'
     This database contains the current state of the observational
     history of the host as recorded by `cf-monitord'.

`state/cf_state.db'
     A database of persistent classes active on this current host.


File: cf3-reference.info,  Node: Text logs,  Next: Reports in outputs,  Prev: Embedded Databases,  Up: Logs and records

12.2 Text logs
==============

`promise.log'
     A time-stamped log of the percentage fraction of promises kept
     after each run.

`cf3.HOSTNAME.runlog'
     A time-stamped log of when each lock was released. This shows the
     last time each individual promise was verified.

`cfagent.HOSTNAME.log'
     Although ambiguously named (for historical reasons) this log
     contains the current list of setuid/setgid programs observed on
     the system. Cfengine warns about new additions to this list.

`state/file_hash_event_history'
     A time-stamped log of which files have experienced content changes
     since the last observation, as determined by the hashing
     algorithms in cfengine.


File: cf3-reference.info,  Node: Reports in outputs,  Next: State information,  Prev: Text logs,  Up: Logs and records

12.3 Reports in outputs
=======================

The `outputs' directory contains a time-stamped list of outputs
generated by `cf-agent'. These are collected by `cf-execd' and are
often E-mailed as reports. However, not all hosts have an E-mail
capability or are online, so the reports are kept here. Reports are not
tidied automatically, so you should delete these files after a time to
avoid a build up.


File: cf3-reference.info,  Node: State information,  Prev: Reports in outputs,  Up: Logs and records

12.4 State information
======================

The cfengine components keep their current process identifier number in
`pid files' in the work directory: e.g.

cf-execd.pid
cf-serverd.pid

   Most other state data refer to the running condition of the host and
are generated by `cf-monitord' (`cfenvd' in earlier versions of
cfengine).

`state/env_data'
     This file contains a list of currently discovered classes and
     variable values that characterize the anomaly alert environment.
     They are altered by the monitor daemon.

`state/all_classes'
     A list of all the classes that were defined the last time that
     cfengine was run.

`state/cf_*'
     All files that begin with this prefix refer to cached data that
     were observed by the monitor daemon, and may be used by `cf-agent'
     in `reports' with `showstate'.


